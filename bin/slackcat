#!/usr/bin/env ruby

require 'httmultiparty'
require 'optimist'

class Slackcat
  include HTTMultiParty
  base_uri 'https://slack.com/api'

  def initialize(token)
    @token = token
  end

  ## get a channel, group, im or user list
  def get_objects(method, key)
    self.class.get("/#{method}", query: { token: @token }).tap do |response|
      raise "error retrieving #{key} from #{method}: #{response.fetch('error', 'unknown error')}" unless response['ok']
    end.fetch(key)
  end

  def channels
    @channels ||= get_objects('channels.list', 'channels')
  end

  def groups
    @groups ||= get_objects('groups.list', 'groups')
  end

  def ims
    @ims ||= get_objects('im.list', 'ims')
  end

  def users
    @users ||= get_objects('users.list', 'members')
  end

  ## get my username
  def auth
    @auth ||= get_objects('auth.test', 'user')
  end

  ## translate a username into an IM id
  def im_for_user(username)
    user = users.find do |u|
      u['name'] == username
    end
    ims.find do |im|
      im['user'] == user['id']
    end
  end

  ## upload a file or text snippet
  def upload(params)
    self.class.post('/files.upload', body: params.merge({token: @token})).tap do |response|
      raise "error uploading file: #{response.fetch('error', 'unknown error')}" unless response['ok']
    end
  end

  ## send message to one channel as a single post, instead of file upload
  def post_message(params)
    self.class.post('/chat.postMessage', body: params.merge({token: @token})).tap do |response|
      raise "error posting message: #{response.fetch('error', 'unknown error')}" unless response['ok']
    end
  end

  ## download a file posted by another user
  def download(params, save_as)
    info = self.class.get('/files.info', query: params.merge({token: @token})).tap do |response|
      raise "error retrieving information for for file #{params[:file]}: #{response.fetch('error', 'unknown error')}" unless response['ok']
    end.fetch('file')

    if download = info['url_private']
      uri  = URI(download)
      name = uri.path.split('/').last

      if save_as
        if File.directory?(save_as)
          name = "#{save_as}/#{name}"
        else
          name = save_as
        end
      end

      File.open(name, 'wb') { |f| f.write HTTParty.get(download).parsed_response }
      return name
    else
      raise "error determining private download URL for file #{params[:file]}"
    end
  end

end

opts = Optimist::options do
  opt :token,           'Slack API token',            type: :string,  short: 'k', default: ENV.fetch('SLACK_TOKEN', nil)
  opt :channels,        'Channels to share',          type: :string,  short: 'c', default: ''
  opt :groups,          'Groups to share',            type: :string,  short: 'g', default: ''
  opt :users,           'Users (DMs) to share',       type: :string,  short: 'u', default: ''
  opt :filetype,        'File type identifier',       type: :string,  short: 't'
  opt :title,           'Title of file',              type: :string,  short: 'T'
  opt :filename,        'Filename of file',           type: :string,  short: 'n'
  opt :initial_comment, 'Initial comment to add',     type: :string,  short: 'i'
  opt :post,            'Post instead of upload',     type: :boolean, short: 'p', default: false
  opt :multipart,       'Multipart upload each file', type: :boolean, short: 'm', default: false
  opt :download,        'Download a linked file',     type: :string,  short: 'd'
  opt :save_as,         'Save downloaded file as',    type: :string,  short: 's'
end

raise 'set slack API token using SLACK_TOKEN or -k option' unless opts[:token]
slack = Slackcat.new(opts[:token])

## use default channel if no destination given
if opts.values_at(:channels, :groups, :users).all?(&:empty?)
  opts[:channels] = ENV.fetch('SLACK_CHANNEL', '')
end

## translate destination names into slack ids
channels = opts[:channels].split(/[\s,]+/).map do |name|
  slack.channels.find { |channel| channel['name'] == name }.fetch('id')
end

groups = opts[:groups].split(/[\s,]+/).map do |name|
  slack.groups.find { |group| group['name'] == name }.fetch('id')
end

ims = opts[:users].split(/[\s,]+/).map do |name|
  slack.im_for_user(name).fetch('id')
end

params = {
  filetype:        opts[:filetype],
  filename:        opts[:filename],
  title:           opts[:title],
  initial_comment: opts[:initial_comment],
  channels:        (channels + groups + ims).join(',')
}.select { |_, value| value }

if opts[:post] #simple text post
  slack.post_message(text: ARGF.read, channel: params[:channels], as_user: true)
elsif opts[:multipart] #upload multiple individual binary files
  ARGV.each do |arg|
    response = slack.upload({file: File.new(arg), filename: arg}.merge(params))
    file_scope = response['file']
    private_uri = URI.parse(file_scope['url_private'])
    secret_key = file_scope['permalink_public'].split('-').last #pull key param from public URL
    private_uri.query = "pub_secret=#{secret_key}"
    puts private_uri.to_s
  end
elsif opts[:download] #download a linked file
  uri  = URI(opts[:download])
  file = uri.path.split('/')[3] # 0 is always empty, 1 is always 'files', 2 is always username
  dst  = slack.download({file: file}, opts[:save_as])
  puts "File downloaded to #{dst}"
else #upload concatenated text snippet
  slack.upload(params.merge(content: ARGF.read))
end
